generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model feedback {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content     String
  user_id     String?   @db.Uuid
  provider_id String?   @db.Uuid
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @db.Timestamp(6)
  provider    provider? @relation(fields: [provider_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user        user?     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model lesson {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String    @db.VarChar(255)
  content     String
  skill_level String    @db.VarChar(255)
  provider_id String?   @db.Uuid
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @db.Timestamp(6)
  provider    provider? @relation(fields: [provider_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model match {
  id                             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  player_one_id                  String?   @db.Uuid
  player_two_id                  String?   @db.Uuid
  result                         String    @db.VarChar(255)
  provider_id                    String?   @db.Uuid
  created_at                     DateTime  @default(now()) @db.Timestamp(6)
  updated_at                     DateTime  @default(now()) @db.Timestamp(6)
  user_match_player_one_idTouser user?     @relation("match_player_one_idTouser", fields: [player_one_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_match_player_two_idTouser user?     @relation("match_player_two_idTouser", fields: [player_two_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  provider                       provider? @relation(fields: [provider_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model provider {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description    String?          @db.VarChar(255)
  image          String?          @db.VarChar(255)
  name           String           @db.VarChar(255)
  created_at     DateTime         @default(now()) @db.Timestamp(6)
  updated_at     DateTime         @default(now()) @db.Timestamp(6)
  user_id        String           @db.Uuid
  tenant_id      String           @db.VarChar(255)
  feedback       feedback[]
  lesson         lesson[]
  match          match[]
  user           user             @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  puzzle         puzzle[]
  strategy_guide strategy_guide[]
}

model puzzle {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String
  solution    String
  hint        String?
  provider_id String?   @db.Uuid
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @db.Timestamp(6)
  provider    provider? @relation(fields: [provider_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model strategy_guide {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String    @db.VarChar(255)
  content     String
  provider_id String?   @db.Uuid
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @db.Timestamp(6)
  provider    provider? @relation(fields: [provider_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id                              String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                           String     @unique @db.VarChar(255)
  firstName                       String?    @db.VarChar(255)
  lastName                        String?    @db.VarChar(255)
  roq_user_id                     String     @db.VarChar(255)
  tenant_id                       String     @db.VarChar(255)
  created_at                      DateTime   @default(now()) @db.Timestamp(6)
  updated_at                      DateTime   @default(now()) @db.Timestamp(6)
  feedback                        feedback[]
  match_match_player_one_idTouser match[]    @relation("match_player_one_idTouser")
  match_match_player_two_idTouser match[]    @relation("match_player_two_idTouser")
  provider                        provider[]
}
